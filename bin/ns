#!/usr/bin/env node
// vim: set ft=javascript:

'use strict';

const fs = require('fs');
const Parser = require('../parser').Parser;

process.stdin.setEncoding('utf8');
process.stdin.on('readable', () => {
  const chunk = process.stdin.read();
  if (chunk === null) return;
  const fileDeps = chunk
    .split('\n')
    .filter((i) => i)
    .map((src) => {
      const parser = new Parser(fs.readFileSync(src).toString());
      const d = parser.getDeps();
      const deps = Object.keys(d)
        .reduce((acc, c) => {
          d[c].forEach((dep) => acc.add(dep));
          return acc;
        }, new Set([]));
      return {src, ns: parser.getNS(), deps};
    })
    .reduce((acc, file) => {
      acc[file.ns] = file;
      return acc;
    }, {});

  let updated = true;
  while (updated) {
    updated = false;
    for (let ns in fileDeps) {
      const file = fileDeps[ns];
      const originalDepsCount = file.deps.size;
      for (let dep of file.deps.values()) {
        if (!fileDeps[dep]) continue;
        fileDeps[dep].deps.forEach((ns) => file.deps.add(ns));
      }
      if (file.deps.size !== originalDepsCount) updated = true;
    }
  }

  for (let ns in fileDeps) {
    fileDeps[ns].deps = Array.from(fileDeps[ns].deps.values()).sort();
  };

  console.log(JSON.stringify(fileDeps, '', 2));
});

process.stdin.on('end', () => {
  process.exit(0);
});
